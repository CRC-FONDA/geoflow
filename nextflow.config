params {
	input_cube = [
		'/data/Dagobah/dc/deu/ard/X0061_Y0048/*{BOA,QAI}.tif', 
		'/data/Dagobah/dc/deu/ard/X0061_Y0049/*{BOA,QAI}.tif',
		'/data/Dagobah/dc/deu/ard/X0062_Y0048/*{BOA,QAI}.tif',
		'/data/Dagobah/dc/deu/ard/X0060_Y0049/*{BOA,QAI}.tif'
	]

    lucas_survey = "/data/Dagobah/fonda/shk/geoflow/experiment/lucas/lucas_harmo_uf_2018.csv"
	lucas_geom = "/data/Dagobah/fonda/shk/geoflow/experiment/lucas/lucas_geom.gpkg"
	lucas_subset_dir = "/data/Dagobah/fonda/shk/geoflow/experiment"

    output_dir_indices = "/data/Dagobah/fonda/shk/geoflow/experiment/indices_out"

	final_outDir = "/data/Dagobah/fonda/shk/geoflow/experiment/classification"

	publish_lucas_subset = true
    lucas_query = "nuts0 == 'DE' and year == 2018 and (lc1 not in ['8', 'A22', 'A30', 'F40', 'E30', 'B55', 'G21', 'G22'] and obs_type in ['In situ < 100 m', 'In office PI', 'In situ PI'] and lc1_perc in ['50 - 75 %', '> 75 %'])"
	lucas_epsg = 3035

	processing_timeframe = [
		"START": '20200101',
		"END":	 '20201231'
	]

	// Time frames for which STMs should get generated. Currently, they must be exclusive as an item in a channel cannot be passed onto multiple output channels
	// format: [start, end] with the date format being "YYYYMMDD"
	stm_timeframes = [
		['20200101', '20201231'],
		['20200101', '20200331'],
		['20200401', '20200630'],
		['20200701', '20200901'],
		['20201001', '20201231']
	]

	// Uncomment every QA-flag, that should be filtered (apart from the last one, which always needs to be uncommented)
	quality_flags = [
		"NODATA",
		"CLOUD_BUFF",
		"CLOUD_OPAQUE",
		"CLOUD_CIRRUS",
		"CLOUD_SHADOW",
		"SNOW",
		"WATER",
		//"AEROSOL_INTERPOLATED",
		//"AEROSOL_HIGH",
		//"AEROSOL_FILL",
		"SUBZERO",
		"SATURATION",
		//"HIGH_ZENITH",
		//"ILLUMINATION_MEDIUM",
		//"ILLUMINATION_POOR",
		//"ILLUMINATION_SHADOW",
		//"SLOPE",
		//"WATER_VAPOR",
		"EMPTY"
	]

	quality_cat = quality_flags.join(" ")

	// list would work just fine, but to have the same type, I'm using a Map as well.
    // TODO Would probably be better to adjust Sentinel/Landsat band descriptions
    // TODO use this Map for Indices Workflow as well (and rename & reposition it)
    spectral_indices_mapping= [
        "NDVI":         "NDVI",
        "EVI":          "EVI",
        "NBR":          "NBR",
        "NDTI":         "NDTI",
        "ARVI":         "ARVI",
        "SAVI":         "SAVI",
        "SARVI":        "SARVI"
    ]

	stm_band_mapping_sentinel = [
		"BLUE":     "BOA-01",
		"GREEN":    "BOA-02",
		"RED":      "BOA-03",
		"RE1":      "BOA-04",
		"RE2":      "BOA-05",
		"RE3":      "BOA-06",
		"BNIR":     "BOA-07",
		"NIR":      "BOA-08",
		"SWIR1":    "BOA-09",
		"SWIR2":    "BOA-10"
	]

	stm_band_mapping_landsat = [
        "BLUE":     "BOA-01",
        "GREEN":    "BOA-02",
        "RED":      "BOA-03",
        "NIR":      "BOA-04",
        "SWIR1":    "BOA-05",
        "SWIR2":    "BOA-06"
	]

    // for a list of all possible aggregation functions, see:
    // https://enmap-box.readthedocs.io/en/latest/usr_section/usr_manual/processing_algorithms/raster_analysis/aggregate_raster_layer_bands.html
	calculate_stms = [
		"MEAN":		0,
		"STD":		1,
		"VAR":		2,
		"MIN":		3,
		"MEDIAN":	4,
		"MAX":		5,
		"SUM":		6,
		"PRODUCT":	7,
		"RANGE":	8,
		"IQR":		9,
//		"ANY":		10,
//		"ALL":		11,
		"P05":		19,
		"P25":		39,
		"P75":		89,
		"P95":		109
	]
}

process {
	container = 'floriankaterndahl/geoflow:latest'
}

docker {
	enabled = true
	remove = true
	temp = 'auto'
	fixOwnership = true
	//runOptions = '-u $(id -u):$(id -g)'
}

executor {
	$local{
			cpus = 20
        	memory = '200 GB'
	}
}

